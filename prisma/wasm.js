
/* !!! This is code generated by Prisma. Do not edit directly. !!!
/* eslint-disable */

Object.defineProperty(exports, "__esModule", { value: true });

const {
  Decimal,
  objectEnumValues,
  makeStrictEnum,
  Public,
  getRuntime,
  skip
} = require('@prisma/client/runtime/index-browser.js')


const Prisma = {}

exports.Prisma = Prisma
exports.$Enums = {}

/**
 * Prisma Client JS version: 6.13.0
 * Query Engine version: 361e86d0ea4987e9f53a565309b3eed797a6bcbd
 */
Prisma.prismaVersion = {
  client: "6.13.0",
  engine: "361e86d0ea4987e9f53a565309b3eed797a6bcbd"
}

Prisma.PrismaClientKnownRequestError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientKnownRequestError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)};
Prisma.PrismaClientUnknownRequestError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientUnknownRequestError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientRustPanicError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientRustPanicError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientInitializationError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientInitializationError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientValidationError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientValidationError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.Decimal = Decimal

/**
 * Re-export of sql-template-tag
 */
Prisma.sql = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`sqltag is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.empty = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`empty is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.join = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`join is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.raw = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`raw is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.validator = Public.validator

/**
* Extensions
*/
Prisma.getExtensionContext = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`Extensions.getExtensionContext is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.defineExtension = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`Extensions.defineExtension is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}

/**
 * Shorthand utilities for JSON filtering
 */
Prisma.DbNull = objectEnumValues.instances.DbNull
Prisma.JsonNull = objectEnumValues.instances.JsonNull
Prisma.AnyNull = objectEnumValues.instances.AnyNull

Prisma.NullTypes = {
  DbNull: objectEnumValues.classes.DbNull,
  JsonNull: objectEnumValues.classes.JsonNull,
  AnyNull: objectEnumValues.classes.AnyNull
}



/**
 * Enums
 */

exports.Prisma.TransactionIsolationLevel = makeStrictEnum({
  ReadUncommitted: 'ReadUncommitted',
  ReadCommitted: 'ReadCommitted',
  RepeatableRead: 'RepeatableRead',
  Serializable: 'Serializable'
});

exports.Prisma.UserScalarFieldEnum = {
  id: 'id',
  clerkId: 'clerkId',
  email: 'email',
  username: 'username',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.ConsciousnessProfileScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  plkVersion: 'plkVersion',
  plkMetaphorPatterns: 'plkMetaphorPatterns',
  plkCommunicationStyle: 'plkCommunicationStyle',
  plkResonanceScore: 'plkResonanceScore',
  plkProcessingStyle: 'plkProcessingStyle',
  adhdIndicators: 'adhdIndicators',
  autismIndicators: 'autismIndicators',
  cognitiveStrengths: 'cognitiveStrengths',
  processingPreferences: 'processingPreferences',
  attentionPatterns: 'attentionPatterns',
  hyperfocusAreas: 'hyperfocusAreas',
  executiveFunctionMap: 'executiveFunctionMap',
  empowermentLevel: 'empowermentLevel',
  consciousnessCoherence: 'consciousnessCoherence',
  authenticityScore: 'authenticityScore',
  growthTrajectory: 'growthTrajectory',
  consciousnessGrade: 'consciousnessGrade',
  foundationalTruth: 'foundationalTruth',
  coreWisdom: 'coreWisdom',
  revolutionaryPotential: 'revolutionaryPotential',
  chaosCurrentIdentified: 'chaosCurrentIdentified',
  jazzFrequency: 'jazzFrequency',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.BucketDropScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  content: 'content',
  contentType: 'contentType',
  emotionalIntensity: 'emotionalIntensity',
  urgencyLevel: 'urgencyLevel',
  cognitiveLoad: 'cognitiveLoad',
  adhdContext: 'adhdContext',
  hyperfocusIndicator: 'hyperfocusIndicator',
  executiveFunctionTag: 'executiveFunctionTag',
  plkResonance: 'plkResonance',
  metaphorExtracted: 'metaphorExtracted',
  linguisticPattern: 'linguisticPattern',
  status: 'status',
  tapestryIntegrated: 'tapestryIntegrated',
  tribunalReviewed: 'tribunalReviewed',
  capturedAt: 'capturedAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.TapestryNodeScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  xCoordinate: 'xCoordinate',
  yCoordinate: 'yCoordinate',
  zCoordinate: 'zCoordinate',
  nodeSize: 'nodeSize',
  nodeColor: 'nodeColor',
  thoughtContent: 'thoughtContent',
  emotionalResonance: 'emotionalResonance',
  consciousnessDepth: 'consciousnessDepth',
  growthSignificance: 'growthSignificance',
  connectedNodes: 'connectedNodes',
  connectionStrengths: 'connectionStrengths',
  networkCentrality: 'networkCentrality',
  aiInterpretation: 'aiInterpretation',
  patternCategory: 'patternCategory',
  empowermentPotential: 'empowermentPotential',
  bucketDropId: 'bucketDropId',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.TribunalSessionScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  queryText: 'queryText',
  sessionType: 'sessionType',
  openaiResponse: 'openaiResponse',
  anthropicResponse: 'anthropicResponse',
  perplexityResponse: 'perplexityResponse',
  geminiResponse: 'geminiResponse',
  consensusScore: 'consensusScore',
  empowermentConsensus: 'empowermentConsensus',
  consciousnessInsights: 'consciousnessInsights',
  keithWisdomTriggered: 'keithWisdomTriggered',
  foundationalTruthHit: 'foundationalTruthHit',
  revolutionaryPotential: 'revolutionaryPotential',
  adhdAdaptations: 'adhdAdaptations',
  processingAccommodations: 'processingAccommodations',
  cognitiveAccessibility: 'cognitiveAccessibility',
  completedAt: 'completedAt',
  duration: 'duration',
  personasUsed: 'personasUsed',
  createdAt: 'createdAt'
};

exports.Prisma.MusicalDnaAnalysisScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  primaryGenres: 'primaryGenres',
  primaryArtists: 'primaryArtists',
  emotionalThemes: 'emotionalThemes',
  acousticPreference: 'acousticPreference',
  introspectionLevel: 'introspectionLevel',
  resilienceMarkers: 'resilienceMarkers',
  connectionLonging: 'connectionLonging',
  catharticProcessing: 'catharticProcessing',
  narrativeArc: 'narrativeArc',
  transformationStage: 'transformationStage',
  musicalMetaphors: 'musicalMetaphors',
  resonancePattern: 'resonancePattern',
  cognitiveMapping: 'cognitiveMapping',
  songsAnalyzed: 'songsAnalyzed',
  confidenceLevel: 'confidenceLevel',
  lastSpotifySync: 'lastSpotifySync',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.ConsciousnessMetricScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  attentionLevel: 'attentionLevel',
  flowStateIndicator: 'flowStateIndicator',
  executiveFunctionLoad: 'executiveFunctionLoad',
  hyperfocusActive: 'hyperfocusActive',
  empowermentMomentum: 'empowermentMomentum',
  authenticityAlignment: 'authenticityAlignment',
  consciousnessClarity: 'consciousnessClarity',
  revolutionaryReadiness: 'revolutionaryReadiness',
  environmentalFactors: 'environmentalFactors',
  socialContext: 'socialContext',
  timeOfDay: 'timeOfDay',
  energyLevel: 'energyLevel',
  supportNeeded: 'supportNeeded',
  interventionType: 'interventionType',
  timestamp: 'timestamp'
};

exports.Prisma.EmpowermentEventScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  eventType: 'eventType',
  description: 'description',
  intensityLevel: 'intensityLevel',
  scarsToCodeMoment: 'scarsToCodeMoment',
  chaosCurrentRealized: 'chaosCurrentRealized',
  jazzFrequencyTuned: 'jazzFrequencyTuned',
  sourceType: 'sourceType',
  bucketDropId: 'bucketDropId',
  consciousnessShift: 'consciousnessShift',
  empowermentIncrease: 'empowermentIncrease',
  revolutionaryPotential: 'revolutionaryPotential',
  aiValidated: 'aiValidated',
  userConfirmed: 'userConfirmed',
  createdAt: 'createdAt'
};

exports.Prisma.SubscriptionScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  stripeCustomerId: 'stripeCustomerId',
  stripeSubscriptionId: 'stripeSubscriptionId',
  stripePriceId: 'stripePriceId',
  tier: 'tier',
  status: 'status',
  tribunalAccess: 'tribunalAccess',
  musicalDnaUnlocked: 'musicalDnaUnlocked',
  tapestryAdvanced: 'tapestryAdvanced',
  keithDirectAccess: 'keithDirectAccess',
  currentPeriodStart: 'currentPeriodStart',
  currentPeriodEnd: 'currentPeriodEnd',
  cancelAtPeriodEnd: 'cancelAtPeriodEnd',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.FounderAlgorithmCoreScalarFieldEnum = {
  id: 'id',
  principleStatement: 'principleStatement',
  livedExperience: 'livedExperience',
  algorithmicEncoding: 'algorithmicEncoding',
  adhdAsJazzPrinciple: 'adhdAsJazzPrinciple',
  chaosCurrentMechanism: 'chaosCurrentMechanism',
  scarsToCodeTransform: 'scarsToCodeTransform',
  founderIsAlgorithmCore: 'founderIsAlgorithmCore',
  empowermentTriggers: 'empowermentTriggers',
  validationMechanisms: 'validationMechanisms',
  consciousnessScaling: 'consciousnessScaling',
  plkImplementation: 'plkImplementation',
  tribunalOrchestration: 'tribunalOrchestration',
  tapestryWeaving: 'tapestryWeaving',
  version: 'version',
  active: 'active',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.SortOrder = {
  asc: 'asc',
  desc: 'desc'
};

exports.Prisma.JsonNullValueInput = {
  JsonNull: Prisma.JsonNull
};

exports.Prisma.QueryMode = {
  default: 'default',
  insensitive: 'insensitive'
};

exports.Prisma.NullsOrder = {
  first: 'first',
  last: 'last'
};

exports.Prisma.JsonNullValueFilter = {
  DbNull: Prisma.DbNull,
  JsonNull: Prisma.JsonNull,
  AnyNull: Prisma.AnyNull
};


exports.Prisma.ModelName = {
  User: 'User',
  ConsciousnessProfile: 'ConsciousnessProfile',
  BucketDrop: 'BucketDrop',
  TapestryNode: 'TapestryNode',
  TribunalSession: 'TribunalSession',
  MusicalDnaAnalysis: 'MusicalDnaAnalysis',
  ConsciousnessMetric: 'ConsciousnessMetric',
  EmpowermentEvent: 'EmpowermentEvent',
  Subscription: 'Subscription',
  FounderAlgorithmCore: 'FounderAlgorithmCore'
};

/**
 * This is a stub Prisma Client that will error at runtime if called.
 */
class PrismaClient {
  constructor() {
    return new Proxy(this, {
      get(target, prop) {
        let message
        const runtime = getRuntime()
        if (runtime.isEdge) {
          message = `PrismaClient is not configured to run in ${runtime.prettyName}. In order to run Prisma Client on edge runtime, either:
- Use Prisma Accelerate: https://pris.ly/d/accelerate
- Use Driver Adapters: https://pris.ly/d/driver-adapters
`;
        } else {
          message = 'PrismaClient is unable to run in this browser environment, or has been bundled for the browser (running in `' + runtime.prettyName + '`).'
        }

        message += `
If this is unexpected, please open an issue: https://pris.ly/prisma-prisma-bug-report`

        throw new Error(message)
      }
    })
  }
}

exports.PrismaClient = PrismaClient

Object.assign(exports, Prisma)
